# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import director_pb2 as director__pb2
import scenario_pb2 as scenario__pb2
import util_pb2 as util__pb2


class DirectorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.set_persistor = channel.unary_unary(
                '/world.director.Director/set_persistor',
                request_serializer=util__pb2.GRPCAddress.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.turn_scenario = channel.unary_unary(
                '/world.director.Director/turn_scenario',
                request_serializer=director__pb2.TurnScenario.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_running_scenarios = channel.unary_unary(
                '/world.director.Director/list_running_scenarios',
                request_serializer=util__pb2.EmptyMessage.SerializeToString,
                response_deserializer=scenario__pb2.ScenarioDependencyList.FromString,
                )


class DirectorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def set_persistor(self, request, context):
        """set the persistor service address that the director will
        query for retrieving the oracle, scenario data
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def turn_scenario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_running_scenarios(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DirectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'set_persistor': grpc.unary_unary_rpc_method_handler(
                    servicer.set_persistor,
                    request_deserializer=util__pb2.GRPCAddress.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'turn_scenario': grpc.unary_unary_rpc_method_handler(
                    servicer.turn_scenario,
                    request_deserializer=director__pb2.TurnScenario.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_running_scenarios': grpc.unary_unary_rpc_method_handler(
                    servicer.list_running_scenarios,
                    request_deserializer=util__pb2.EmptyMessage.FromString,
                    response_serializer=scenario__pb2.ScenarioDependencyList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'world.director.Director', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Director(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def set_persistor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.director.Director/set_persistor',
            util__pb2.GRPCAddress.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def turn_scenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.director.Director/turn_scenario',
            director__pb2.TurnScenario.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_running_scenarios(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.director.Director/list_running_scenarios',
            util__pb2.EmptyMessage.SerializeToString,
            scenario__pb2.ScenarioDependencyList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
