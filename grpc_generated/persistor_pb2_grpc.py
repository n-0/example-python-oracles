# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import broker_pb2 as broker__pb2
import instrument_pb2 as instrument__pb2
import omen_pb2 as omen__pb2
import oracle_pb2 as oracle__pb2
import scenario_pb2 as scenario__pb2
import util_pb2 as util__pb2


class PersistorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.create_instrument = channel.unary_unary(
                '/world.persistor.Persistor/create_instrument',
                request_serializer=instrument__pb2.Instrument.SerializeToString,
                response_deserializer=instrument__pb2.Instrument.FromString,
                )
        self.read_instrument = channel.unary_unary(
                '/world.persistor.Persistor/read_instrument',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=instrument__pb2.Instrument.FromString,
                )
        self.update_instrument = channel.unary_unary(
                '/world.persistor.Persistor/update_instrument',
                request_serializer=instrument__pb2.Instrument.SerializeToString,
                response_deserializer=instrument__pb2.Instrument.FromString,
                )
        self.delete_instrument = channel.unary_unary(
                '/world.persistor.Persistor/delete_instrument',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_instruments = channel.unary_unary(
                '/world.persistor.Persistor/list_instruments',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=instrument__pb2.InstrumentList.FromString,
                )
        self.create_oracle = channel.unary_unary(
                '/world.persistor.Persistor/create_oracle',
                request_serializer=oracle__pb2.OracleInfo.SerializeToString,
                response_deserializer=oracle__pb2.OracleInfo.FromString,
                )
        self.read_oracle = channel.unary_unary(
                '/world.persistor.Persistor/read_oracle',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=oracle__pb2.OracleInfo.FromString,
                )
        self.update_oracle = channel.unary_unary(
                '/world.persistor.Persistor/update_oracle',
                request_serializer=oracle__pb2.OracleInfo.SerializeToString,
                response_deserializer=oracle__pb2.OracleInfo.FromString,
                )
        self.delete_oracle = channel.unary_unary(
                '/world.persistor.Persistor/delete_oracle',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_oracles = channel.unary_unary(
                '/world.persistor.Persistor/list_oracles',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=oracle__pb2.OracleInfoList.FromString,
                )
        self.create_scenario = channel.unary_unary(
                '/world.persistor.Persistor/create_scenario',
                request_serializer=scenario__pb2.Scenario.SerializeToString,
                response_deserializer=scenario__pb2.Scenario.FromString,
                )
        self.read_scenario = channel.unary_unary(
                '/world.persistor.Persistor/read_scenario',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=scenario__pb2.Scenario.FromString,
                )
        self.update_scenario = channel.unary_unary(
                '/world.persistor.Persistor/update_scenario',
                request_serializer=scenario__pb2.Scenario.SerializeToString,
                response_deserializer=scenario__pb2.Scenario.FromString,
                )
        self.delete_scenario = channel.unary_unary(
                '/world.persistor.Persistor/delete_scenario',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_scenarios = channel.unary_unary(
                '/world.persistor.Persistor/list_scenarios',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=scenario__pb2.ScenarioList.FromString,
                )
        self.create_scenario_dependencies = channel.unary_unary(
                '/world.persistor.Persistor/create_scenario_dependencies',
                request_serializer=scenario__pb2.ScenarioDependencies.SerializeToString,
                response_deserializer=scenario__pb2.ScenarioDependencies.FromString,
                )
        self.read_scenario_dependencies = channel.unary_unary(
                '/world.persistor.Persistor/read_scenario_dependencies',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=scenario__pb2.ScenarioDependencies.FromString,
                )
        self.update_scenario_dependencies = channel.unary_unary(
                '/world.persistor.Persistor/update_scenario_dependencies',
                request_serializer=scenario__pb2.ScenarioDependencies.SerializeToString,
                response_deserializer=scenario__pb2.ScenarioDependencies.FromString,
                )
        self.delete_scenario_dependencies = channel.unary_unary(
                '/world.persistor.Persistor/delete_scenario_dependencies',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_scenario_dependencies = channel.unary_unary(
                '/world.persistor.Persistor/list_scenario_dependencies',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=scenario__pb2.ScenarioDependenciesList.FromString,
                )
        self.create_scenario_state = channel.unary_unary(
                '/world.persistor.Persistor/create_scenario_state',
                request_serializer=scenario__pb2.ScenarioState.SerializeToString,
                response_deserializer=scenario__pb2.ScenarioState.FromString,
                )
        self.read_scenario_state = channel.unary_unary(
                '/world.persistor.Persistor/read_scenario_state',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=scenario__pb2.ScenarioState.FromString,
                )
        self.update_scenario_state = channel.unary_unary(
                '/world.persistor.Persistor/update_scenario_state',
                request_serializer=scenario__pb2.ScenarioState.SerializeToString,
                response_deserializer=scenario__pb2.ScenarioState.FromString,
                )
        self.delete_scenario_state = channel.unary_unary(
                '/world.persistor.Persistor/delete_scenario_state',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_scenario_state = channel.unary_unary(
                '/world.persistor.Persistor/list_scenario_state',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=scenario__pb2.ScenarioStateList.FromString,
                )
        self.create_omen_series_info = channel.unary_unary(
                '/world.persistor.Persistor/create_omen_series_info',
                request_serializer=omen__pb2.OmenSeriesInfo.SerializeToString,
                response_deserializer=omen__pb2.OmenSeriesInfo.FromString,
                )
        self.read_omen_series_info = channel.unary_unary(
                '/world.persistor.Persistor/read_omen_series_info',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=omen__pb2.OmenSeriesInfo.FromString,
                )
        self.list_omen_series_info = channel.unary_unary(
                '/world.persistor.Persistor/list_omen_series_info',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=omen__pb2.OmenSeriesInfoList.FromString,
                )
        self.update_omen_series_info = channel.unary_unary(
                '/world.persistor.Persistor/update_omen_series_info',
                request_serializer=omen__pb2.OmenSeriesInfo.SerializeToString,
                response_deserializer=omen__pb2.OmenSeriesInfo.FromString,
                )
        self.delete_omen_series_info = channel.unary_unary(
                '/world.persistor.Persistor/delete_omen_series_info',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.read_omen_series = channel.unary_stream(
                '/world.persistor.Persistor/read_omen_series',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=omen__pb2.OmenSeriesItem.FromString,
                )
        self.insert_omen_series = channel.stream_unary(
                '/world.persistor.Persistor/insert_omen_series',
                request_serializer=omen__pb2.OmenSeriesItem.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.update_omen_series = channel.stream_unary(
                '/world.persistor.Persistor/update_omen_series',
                request_serializer=omen__pb2.OmenSeriesItem.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.filter_omen_series_from = channel.stream_unary(
                '/world.persistor.Persistor/filter_omen_series_from',
                request_serializer=omen__pb2.OmenSeriesItem.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.create_broker = channel.unary_unary(
                '/world.persistor.Persistor/create_broker',
                request_serializer=broker__pb2.BrokerInfo.SerializeToString,
                response_deserializer=broker__pb2.BrokerInfo.FromString,
                )
        self.read_broker = channel.unary_unary(
                '/world.persistor.Persistor/read_broker',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=broker__pb2.BrokerInfo.FromString,
                )
        self.update_broker = channel.unary_unary(
                '/world.persistor.Persistor/update_broker',
                request_serializer=broker__pb2.BrokerInfo.SerializeToString,
                response_deserializer=broker__pb2.BrokerInfo.FromString,
                )
        self.delete_broker = channel.unary_unary(
                '/world.persistor.Persistor/delete_broker',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_broker = channel.unary_unary(
                '/world.persistor.Persistor/list_broker',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=broker__pb2.BrokerInfoList.FromString,
                )
        self.create_account = channel.unary_unary(
                '/world.persistor.Persistor/create_account',
                request_serializer=broker__pb2.Account.SerializeToString,
                response_deserializer=broker__pb2.Account.FromString,
                )
        self.read_account = channel.unary_unary(
                '/world.persistor.Persistor/read_account',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=broker__pb2.Account.FromString,
                )
        self.update_account = channel.unary_unary(
                '/world.persistor.Persistor/update_account',
                request_serializer=broker__pb2.Account.SerializeToString,
                response_deserializer=broker__pb2.Account.FromString,
                )
        self.delete_account = channel.unary_unary(
                '/world.persistor.Persistor/delete_account',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_account = channel.unary_unary(
                '/world.persistor.Persistor/list_account',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=broker__pb2.AccountList.FromString,
                )
        self.create_order = channel.unary_unary(
                '/world.persistor.Persistor/create_order',
                request_serializer=broker__pb2.Order.SerializeToString,
                response_deserializer=broker__pb2.Order.FromString,
                )
        self.read_order = channel.unary_unary(
                '/world.persistor.Persistor/read_order',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=broker__pb2.Order.FromString,
                )
        self.update_order = channel.unary_unary(
                '/world.persistor.Persistor/update_order',
                request_serializer=broker__pb2.Order.SerializeToString,
                response_deserializer=broker__pb2.Order.FromString,
                )
        self.delete_order = channel.unary_unary(
                '/world.persistor.Persistor/delete_order',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_order = channel.unary_unary(
                '/world.persistor.Persistor/list_order',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=broker__pb2.OrderList.FromString,
                )
        self.create_position = channel.unary_unary(
                '/world.persistor.Persistor/create_position',
                request_serializer=broker__pb2.Position.SerializeToString,
                response_deserializer=broker__pb2.Position.FromString,
                )
        self.read_position = channel.unary_unary(
                '/world.persistor.Persistor/read_position',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=broker__pb2.Position.FromString,
                )
        self.update_position = channel.unary_unary(
                '/world.persistor.Persistor/update_position',
                request_serializer=broker__pb2.Position.SerializeToString,
                response_deserializer=broker__pb2.Position.FromString,
                )
        self.delete_position = channel.unary_unary(
                '/world.persistor.Persistor/delete_position',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_position = channel.unary_unary(
                '/world.persistor.Persistor/list_position',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=broker__pb2.PositionList.FromString,
                )


class PersistorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def create_instrument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_instrument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_instrument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_instrument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_instruments(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_oracle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_oracle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_oracle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_oracle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_oracles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_scenario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_scenario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_scenario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_scenario(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_scenarios(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_scenario_dependencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_scenario_dependencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_scenario_dependencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_scenario_dependencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_scenario_dependencies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_scenario_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_scenario_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_scenario_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_scenario_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_scenario_state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_omen_series_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_omen_series_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_omen_series_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_omen_series_info(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_omen_series_info(self, request, context):
        """deletes its series as well
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_omen_series(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def insert_omen_series(self, request_iterator, context):
        """i guess this would allow sending omens for different series
        over the stream
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_omen_series(self, request_iterator, context):
        """replaces the whole series with the new one
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def filter_omen_series_from(self, request_iterator, context):
        """removes omen from the series that match the filter
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_broker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_broker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_broker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_broker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_broker(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_account(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_account(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_account(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_account(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_account(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_position(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def read_position(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_position(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def delete_position(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_position(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PersistorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'create_instrument': grpc.unary_unary_rpc_method_handler(
                    servicer.create_instrument,
                    request_deserializer=instrument__pb2.Instrument.FromString,
                    response_serializer=instrument__pb2.Instrument.SerializeToString,
            ),
            'read_instrument': grpc.unary_unary_rpc_method_handler(
                    servicer.read_instrument,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=instrument__pb2.Instrument.SerializeToString,
            ),
            'update_instrument': grpc.unary_unary_rpc_method_handler(
                    servicer.update_instrument,
                    request_deserializer=instrument__pb2.Instrument.FromString,
                    response_serializer=instrument__pb2.Instrument.SerializeToString,
            ),
            'delete_instrument': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_instrument,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_instruments': grpc.unary_unary_rpc_method_handler(
                    servicer.list_instruments,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=instrument__pb2.InstrumentList.SerializeToString,
            ),
            'create_oracle': grpc.unary_unary_rpc_method_handler(
                    servicer.create_oracle,
                    request_deserializer=oracle__pb2.OracleInfo.FromString,
                    response_serializer=oracle__pb2.OracleInfo.SerializeToString,
            ),
            'read_oracle': grpc.unary_unary_rpc_method_handler(
                    servicer.read_oracle,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=oracle__pb2.OracleInfo.SerializeToString,
            ),
            'update_oracle': grpc.unary_unary_rpc_method_handler(
                    servicer.update_oracle,
                    request_deserializer=oracle__pb2.OracleInfo.FromString,
                    response_serializer=oracle__pb2.OracleInfo.SerializeToString,
            ),
            'delete_oracle': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_oracle,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_oracles': grpc.unary_unary_rpc_method_handler(
                    servicer.list_oracles,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=oracle__pb2.OracleInfoList.SerializeToString,
            ),
            'create_scenario': grpc.unary_unary_rpc_method_handler(
                    servicer.create_scenario,
                    request_deserializer=scenario__pb2.Scenario.FromString,
                    response_serializer=scenario__pb2.Scenario.SerializeToString,
            ),
            'read_scenario': grpc.unary_unary_rpc_method_handler(
                    servicer.read_scenario,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=scenario__pb2.Scenario.SerializeToString,
            ),
            'update_scenario': grpc.unary_unary_rpc_method_handler(
                    servicer.update_scenario,
                    request_deserializer=scenario__pb2.Scenario.FromString,
                    response_serializer=scenario__pb2.Scenario.SerializeToString,
            ),
            'delete_scenario': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_scenario,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_scenarios': grpc.unary_unary_rpc_method_handler(
                    servicer.list_scenarios,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=scenario__pb2.ScenarioList.SerializeToString,
            ),
            'create_scenario_dependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.create_scenario_dependencies,
                    request_deserializer=scenario__pb2.ScenarioDependencies.FromString,
                    response_serializer=scenario__pb2.ScenarioDependencies.SerializeToString,
            ),
            'read_scenario_dependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.read_scenario_dependencies,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=scenario__pb2.ScenarioDependencies.SerializeToString,
            ),
            'update_scenario_dependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.update_scenario_dependencies,
                    request_deserializer=scenario__pb2.ScenarioDependencies.FromString,
                    response_serializer=scenario__pb2.ScenarioDependencies.SerializeToString,
            ),
            'delete_scenario_dependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_scenario_dependencies,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_scenario_dependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.list_scenario_dependencies,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=scenario__pb2.ScenarioDependenciesList.SerializeToString,
            ),
            'create_scenario_state': grpc.unary_unary_rpc_method_handler(
                    servicer.create_scenario_state,
                    request_deserializer=scenario__pb2.ScenarioState.FromString,
                    response_serializer=scenario__pb2.ScenarioState.SerializeToString,
            ),
            'read_scenario_state': grpc.unary_unary_rpc_method_handler(
                    servicer.read_scenario_state,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=scenario__pb2.ScenarioState.SerializeToString,
            ),
            'update_scenario_state': grpc.unary_unary_rpc_method_handler(
                    servicer.update_scenario_state,
                    request_deserializer=scenario__pb2.ScenarioState.FromString,
                    response_serializer=scenario__pb2.ScenarioState.SerializeToString,
            ),
            'delete_scenario_state': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_scenario_state,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_scenario_state': grpc.unary_unary_rpc_method_handler(
                    servicer.list_scenario_state,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=scenario__pb2.ScenarioStateList.SerializeToString,
            ),
            'create_omen_series_info': grpc.unary_unary_rpc_method_handler(
                    servicer.create_omen_series_info,
                    request_deserializer=omen__pb2.OmenSeriesInfo.FromString,
                    response_serializer=omen__pb2.OmenSeriesInfo.SerializeToString,
            ),
            'read_omen_series_info': grpc.unary_unary_rpc_method_handler(
                    servicer.read_omen_series_info,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=omen__pb2.OmenSeriesInfo.SerializeToString,
            ),
            'list_omen_series_info': grpc.unary_unary_rpc_method_handler(
                    servicer.list_omen_series_info,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=omen__pb2.OmenSeriesInfoList.SerializeToString,
            ),
            'update_omen_series_info': grpc.unary_unary_rpc_method_handler(
                    servicer.update_omen_series_info,
                    request_deserializer=omen__pb2.OmenSeriesInfo.FromString,
                    response_serializer=omen__pb2.OmenSeriesInfo.SerializeToString,
            ),
            'delete_omen_series_info': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_omen_series_info,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'read_omen_series': grpc.unary_stream_rpc_method_handler(
                    servicer.read_omen_series,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=omen__pb2.OmenSeriesItem.SerializeToString,
            ),
            'insert_omen_series': grpc.stream_unary_rpc_method_handler(
                    servicer.insert_omen_series,
                    request_deserializer=omen__pb2.OmenSeriesItem.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'update_omen_series': grpc.stream_unary_rpc_method_handler(
                    servicer.update_omen_series,
                    request_deserializer=omen__pb2.OmenSeriesItem.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'filter_omen_series_from': grpc.stream_unary_rpc_method_handler(
                    servicer.filter_omen_series_from,
                    request_deserializer=omen__pb2.OmenSeriesItem.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'create_broker': grpc.unary_unary_rpc_method_handler(
                    servicer.create_broker,
                    request_deserializer=broker__pb2.BrokerInfo.FromString,
                    response_serializer=broker__pb2.BrokerInfo.SerializeToString,
            ),
            'read_broker': grpc.unary_unary_rpc_method_handler(
                    servicer.read_broker,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=broker__pb2.BrokerInfo.SerializeToString,
            ),
            'update_broker': grpc.unary_unary_rpc_method_handler(
                    servicer.update_broker,
                    request_deserializer=broker__pb2.BrokerInfo.FromString,
                    response_serializer=broker__pb2.BrokerInfo.SerializeToString,
            ),
            'delete_broker': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_broker,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_broker': grpc.unary_unary_rpc_method_handler(
                    servicer.list_broker,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=broker__pb2.BrokerInfoList.SerializeToString,
            ),
            'create_account': grpc.unary_unary_rpc_method_handler(
                    servicer.create_account,
                    request_deserializer=broker__pb2.Account.FromString,
                    response_serializer=broker__pb2.Account.SerializeToString,
            ),
            'read_account': grpc.unary_unary_rpc_method_handler(
                    servicer.read_account,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=broker__pb2.Account.SerializeToString,
            ),
            'update_account': grpc.unary_unary_rpc_method_handler(
                    servicer.update_account,
                    request_deserializer=broker__pb2.Account.FromString,
                    response_serializer=broker__pb2.Account.SerializeToString,
            ),
            'delete_account': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_account,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_account': grpc.unary_unary_rpc_method_handler(
                    servicer.list_account,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=broker__pb2.AccountList.SerializeToString,
            ),
            'create_order': grpc.unary_unary_rpc_method_handler(
                    servicer.create_order,
                    request_deserializer=broker__pb2.Order.FromString,
                    response_serializer=broker__pb2.Order.SerializeToString,
            ),
            'read_order': grpc.unary_unary_rpc_method_handler(
                    servicer.read_order,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=broker__pb2.Order.SerializeToString,
            ),
            'update_order': grpc.unary_unary_rpc_method_handler(
                    servicer.update_order,
                    request_deserializer=broker__pb2.Order.FromString,
                    response_serializer=broker__pb2.Order.SerializeToString,
            ),
            'delete_order': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_order,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_order': grpc.unary_unary_rpc_method_handler(
                    servicer.list_order,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=broker__pb2.OrderList.SerializeToString,
            ),
            'create_position': grpc.unary_unary_rpc_method_handler(
                    servicer.create_position,
                    request_deserializer=broker__pb2.Position.FromString,
                    response_serializer=broker__pb2.Position.SerializeToString,
            ),
            'read_position': grpc.unary_unary_rpc_method_handler(
                    servicer.read_position,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=broker__pb2.Position.SerializeToString,
            ),
            'update_position': grpc.unary_unary_rpc_method_handler(
                    servicer.update_position,
                    request_deserializer=broker__pb2.Position.FromString,
                    response_serializer=broker__pb2.Position.SerializeToString,
            ),
            'delete_position': grpc.unary_unary_rpc_method_handler(
                    servicer.delete_position,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_position': grpc.unary_unary_rpc_method_handler(
                    servicer.list_position,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=broker__pb2.PositionList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'world.persistor.Persistor', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Persistor(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def create_instrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/create_instrument',
            instrument__pb2.Instrument.SerializeToString,
            instrument__pb2.Instrument.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_instrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/read_instrument',
            util__pb2.QueryById.SerializeToString,
            instrument__pb2.Instrument.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_instrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/update_instrument',
            instrument__pb2.Instrument.SerializeToString,
            instrument__pb2.Instrument.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_instrument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/delete_instrument',
            util__pb2.QueryById.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_instruments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/list_instruments',
            util__pb2.QueryByIdFilter.SerializeToString,
            instrument__pb2.InstrumentList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_oracle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/create_oracle',
            oracle__pb2.OracleInfo.SerializeToString,
            oracle__pb2.OracleInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_oracle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/read_oracle',
            util__pb2.QueryById.SerializeToString,
            oracle__pb2.OracleInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_oracle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/update_oracle',
            oracle__pb2.OracleInfo.SerializeToString,
            oracle__pb2.OracleInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_oracle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/delete_oracle',
            util__pb2.QueryById.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_oracles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/list_oracles',
            util__pb2.QueryByIdFilter.SerializeToString,
            oracle__pb2.OracleInfoList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_scenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/create_scenario',
            scenario__pb2.Scenario.SerializeToString,
            scenario__pb2.Scenario.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_scenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/read_scenario',
            util__pb2.QueryById.SerializeToString,
            scenario__pb2.Scenario.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_scenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/update_scenario',
            scenario__pb2.Scenario.SerializeToString,
            scenario__pb2.Scenario.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_scenario(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/delete_scenario',
            util__pb2.QueryById.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_scenarios(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/list_scenarios',
            util__pb2.QueryByIdFilter.SerializeToString,
            scenario__pb2.ScenarioList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_scenario_dependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/create_scenario_dependencies',
            scenario__pb2.ScenarioDependencies.SerializeToString,
            scenario__pb2.ScenarioDependencies.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_scenario_dependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/read_scenario_dependencies',
            util__pb2.QueryById.SerializeToString,
            scenario__pb2.ScenarioDependencies.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_scenario_dependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/update_scenario_dependencies',
            scenario__pb2.ScenarioDependencies.SerializeToString,
            scenario__pb2.ScenarioDependencies.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_scenario_dependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/delete_scenario_dependencies',
            util__pb2.QueryById.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_scenario_dependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/list_scenario_dependencies',
            util__pb2.QueryByIdFilter.SerializeToString,
            scenario__pb2.ScenarioDependenciesList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_scenario_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/create_scenario_state',
            scenario__pb2.ScenarioState.SerializeToString,
            scenario__pb2.ScenarioState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_scenario_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/read_scenario_state',
            util__pb2.QueryById.SerializeToString,
            scenario__pb2.ScenarioState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_scenario_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/update_scenario_state',
            scenario__pb2.ScenarioState.SerializeToString,
            scenario__pb2.ScenarioState.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_scenario_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/delete_scenario_state',
            util__pb2.QueryById.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_scenario_state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/list_scenario_state',
            util__pb2.QueryByIdFilter.SerializeToString,
            scenario__pb2.ScenarioStateList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_omen_series_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/create_omen_series_info',
            omen__pb2.OmenSeriesInfo.SerializeToString,
            omen__pb2.OmenSeriesInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_omen_series_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/read_omen_series_info',
            util__pb2.QueryById.SerializeToString,
            omen__pb2.OmenSeriesInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_omen_series_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/list_omen_series_info',
            util__pb2.QueryByIdFilter.SerializeToString,
            omen__pb2.OmenSeriesInfoList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_omen_series_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/update_omen_series_info',
            omen__pb2.OmenSeriesInfo.SerializeToString,
            omen__pb2.OmenSeriesInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_omen_series_info(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/delete_omen_series_info',
            util__pb2.QueryById.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_omen_series(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/world.persistor.Persistor/read_omen_series',
            util__pb2.QueryByIdFilter.SerializeToString,
            omen__pb2.OmenSeriesItem.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def insert_omen_series(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/world.persistor.Persistor/insert_omen_series',
            omen__pb2.OmenSeriesItem.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_omen_series(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/world.persistor.Persistor/update_omen_series',
            omen__pb2.OmenSeriesItem.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def filter_omen_series_from(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/world.persistor.Persistor/filter_omen_series_from',
            omen__pb2.OmenSeriesItem.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_broker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/create_broker',
            broker__pb2.BrokerInfo.SerializeToString,
            broker__pb2.BrokerInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_broker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/read_broker',
            util__pb2.QueryById.SerializeToString,
            broker__pb2.BrokerInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_broker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/update_broker',
            broker__pb2.BrokerInfo.SerializeToString,
            broker__pb2.BrokerInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_broker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/delete_broker',
            util__pb2.QueryById.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_broker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/list_broker',
            util__pb2.QueryByIdFilter.SerializeToString,
            broker__pb2.BrokerInfoList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/create_account',
            broker__pb2.Account.SerializeToString,
            broker__pb2.Account.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/read_account',
            util__pb2.QueryById.SerializeToString,
            broker__pb2.Account.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/update_account',
            broker__pb2.Account.SerializeToString,
            broker__pb2.Account.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/delete_account',
            util__pb2.QueryById.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/list_account',
            util__pb2.QueryByIdFilter.SerializeToString,
            broker__pb2.AccountList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/create_order',
            broker__pb2.Order.SerializeToString,
            broker__pb2.Order.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/read_order',
            util__pb2.QueryById.SerializeToString,
            broker__pb2.Order.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/update_order',
            broker__pb2.Order.SerializeToString,
            broker__pb2.Order.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/delete_order',
            util__pb2.QueryById.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/list_order',
            util__pb2.QueryByIdFilter.SerializeToString,
            broker__pb2.OrderList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_position(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/create_position',
            broker__pb2.Position.SerializeToString,
            broker__pb2.Position.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def read_position(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/read_position',
            util__pb2.QueryById.SerializeToString,
            broker__pb2.Position.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_position(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/update_position',
            broker__pb2.Position.SerializeToString,
            broker__pb2.Position.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def delete_position(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/delete_position',
            util__pb2.QueryById.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_position(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.persistor.Persistor/list_position',
            util__pb2.QueryByIdFilter.SerializeToString,
            broker__pb2.PositionList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
