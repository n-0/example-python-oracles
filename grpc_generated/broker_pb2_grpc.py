# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import broker_pb2 as broker__pb2
from . import util_pb2 as util__pb2


class BrokerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.set_persistor = channel.unary_unary(
                '/world.broker.Broker/set_persistor',
                request_serializer=util__pb2.GRPCAddress.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.send_order = channel.unary_unary(
                '/world.broker.Broker/send_order',
                request_serializer=broker__pb2.Order.SerializeToString,
                response_deserializer=util__pb2.RequestResponse.FromString,
                )
        self.list_all_orders = channel.unary_unary(
                '/world.broker.Broker/list_all_orders',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=broker__pb2.OrderList.FromString,
                )
        self.list_all_positions = channel.unary_unary(
                '/world.broker.Broker/list_all_positions',
                request_serializer=util__pb2.QueryByIdFilter.SerializeToString,
                response_deserializer=broker__pb2.PositionList.FromString,
                )
        self.get_account = channel.unary_unary(
                '/world.broker.Broker/get_account',
                request_serializer=util__pb2.QueryById.SerializeToString,
                response_deserializer=broker__pb2.Account.FromString,
                )


class BrokerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def set_persistor(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_order(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_all_orders(self, request, context):
        """acount id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def list_all_positions(self, request, context):
        """id of account for the orders
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_account(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BrokerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'set_persistor': grpc.unary_unary_rpc_method_handler(
                    servicer.set_persistor,
                    request_deserializer=util__pb2.GRPCAddress.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'send_order': grpc.unary_unary_rpc_method_handler(
                    servicer.send_order,
                    request_deserializer=broker__pb2.Order.FromString,
                    response_serializer=util__pb2.RequestResponse.SerializeToString,
            ),
            'list_all_orders': grpc.unary_unary_rpc_method_handler(
                    servicer.list_all_orders,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=broker__pb2.OrderList.SerializeToString,
            ),
            'list_all_positions': grpc.unary_unary_rpc_method_handler(
                    servicer.list_all_positions,
                    request_deserializer=util__pb2.QueryByIdFilter.FromString,
                    response_serializer=broker__pb2.PositionList.SerializeToString,
            ),
            'get_account': grpc.unary_unary_rpc_method_handler(
                    servicer.get_account,
                    request_deserializer=util__pb2.QueryById.FromString,
                    response_serializer=broker__pb2.Account.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'world.broker.Broker', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Broker(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def set_persistor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.broker.Broker/set_persistor',
            util__pb2.GRPCAddress.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_order(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.broker.Broker/send_order',
            broker__pb2.Order.SerializeToString,
            util__pb2.RequestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_all_orders(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.broker.Broker/list_all_orders',
            util__pb2.QueryByIdFilter.SerializeToString,
            broker__pb2.OrderList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def list_all_positions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.broker.Broker/list_all_positions',
            util__pb2.QueryByIdFilter.SerializeToString,
            broker__pb2.PositionList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_account(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/world.broker.Broker/get_account',
            util__pb2.QueryById.SerializeToString,
            broker__pb2.Account.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
